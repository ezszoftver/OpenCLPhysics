#version 330

layout (location = 0) out vec4 outColor;

uniform sampler2D g_Texture;
uniform sampler2D g_DepthTexture;
uniform vec3 lightDir;

in vec3 Position;
in vec3 Normal;
in vec2 Texcoord;
in vec4 Depth;

void main()
{
	vec4 textureColor = texture2D(g_Texture, Texcoord);
	
	// alpha
	if (textureColor.a < 0.5f)
	{
		discard;
	}

	vec3 normal = normalize(Normal);
	vec3 depth = ((Depth.xyz / Depth.w) * 0.5f) + 0.5f; // [-1 .. 1] to [0 .. 1] 
	
	float ambientIntensity = 0.3f;
	float diffuseIntensity = ambientIntensity;
	float pixelSize = 1.0f / 2048.0f;
	for(int i = -1; i <= 1; i++)
	{
		for(int j = -1; j <= 1; j++)
		{
			vec2 coord = depth.xy + vec2(pixelSize * i, pixelSize * j);
			float depthLight = texture2D(g_DepthTexture, coord).x;
			bool isShadow = ((depthLight + 0.00125f) < depth.z) ? true : false;
			if (false == isShadow || depth.x < 0.0f || depth.x > 1.0f || depth.y < 0.0f || depth.y > 1.0f)
			{
				diffuseIntensity += max(dot(normal, -lightDir), 0.0f) / 9.0f;
			}
		}
	}
	
	outColor = textureColor * diffuseIntensity;
}
